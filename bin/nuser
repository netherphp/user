<?php

(function() {
	require(sprintf('%s/autoload.php', dirname(__DIR__, 3)));
	return;
})();

class App
extends Nether\Console\Client {

	protected function
	OnReady():
	void {

		// get atlantis to load the database config if it is around.

		if(class_exists('\\Nether\\Atlantis\\Engine')) {
			$App = new Nether\Atlantis\Engine(getcwd());
		}

		return;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Nether\Console\Meta\Command('get')]
	#[Nether\Console\Meta\Info('View information about the user.')]
	#[Nether\Console\Meta\Arg('id/alias', 'Username / User Alias')]
	#[Nether\Console\Meta\Error(1, 'user not found')]
	public function
	HandleUserGet():
	int {

		$Lookup = $this->GetInput(1);
		$Format = $this->GetOption('Format') ?: 'json';
		$Full = $this->GetOption('Full') ?: FALSE;
		$User = $this->GetUser($Lookup);

		if(!$User)
		$this->Quit(1);

		if($Format === 'json') {
			if(!$Full)
			echo json_encode([ 'ID'=> $User->ID, 'Alias'=> $User->Alias, 'Email'=> $User->Email ]);
			else
			echo json_encode($User);

			echo PHP_EOL;
		}

		return 0;
	}

	#[Nether\Console\Meta\Command('insert')]
	#[Nether\Console\Meta\Info('Create a new user.')]
	#[Nether\Console\Meta\Arg('alias', 'Username / User Alias')]
	#[Nether\Console\Meta\Arg('email', 'Email address.')]
	#[Nether\Console\Meta\Error(1, 'Alias and Email must be specified.')]
	#[Nether\Console\Meta\Error(2, 'Failed to insert new user.')]
	public function
	HandleUserInsert():
	int {

		$Format = $this->GetOption('Format') ?: 'json';
		$Full = $this->GetOption('Full') ?: FALSE;

		////////

		$Alias = $this->GetOption('Alias');
		$Email = $this->GetOption('Email');

		if(!$Alias || !$Email)
		$this->Quit(1);

		////////

		$User = Nether\User\Entity::Insert([
			'Alias' => $Alias,
			'Email' => $Email
		]);

		if(!$User)
		$this->Quit(2);

		////////

		if($Format === 'json') {
			if(!$Full)
			static::PrintLn(json_encode([ 'ID'=> $User->ID, 'Alias'=> $User->Alias, 'Email'=> $User->Email ]));
			else
			static::PrintLn(json_encode($User));
		}

		return 0;
	}

	#[Nether\Console\Meta\Command('update')]
	#[Nether\Console\Meta\Info('Update information for a user.')]
	#[Nether\Console\Meta\Arg('id/alias', 'Username / User Alias')]
	#[Nether\Console\Meta\Error(1, 'user not found')]
	public function
	HandleUserUpdate():
	int {

		$Table = Nether\User\Entity::GetTableInfo();
		$Lookup = $this->GetInput(1);
		$User = $this->GetUser($Lookup);
		$Dataset = [];
		$Key = NULL;

		if(!$User)
		$this->Quit(1);

		////////

		foreach(array_keys($Table->Fields) as $Key)
		if($this->HasOption($Key))
		$Dataset[$Key] = $this->GetOption($Key);

		////////

		$User->Update($Dataset);

		Nether\Console\Util::ObjectDump($User);

		return 0;
	}

	#[Nether\Console\Meta\Command('drop')]
	#[Nether\Console\Meta\Info('View information about the user.')]
	#[Nether\Console\Meta\Arg('id/alias', 'Username / User Alias')]
	public function
	HandleUserDrop():
	int {

		$Lookup = $this->GetInput(1);
		$User = $this->GetUser($Lookup);

		if($User) {
			$this->PrintLn("deleted: {$User->ID} {$User->Alias} {$User->Email}");
			$User->Drop();
		}

		return 0;
	}

	#[Nether\Console\Meta\Command('find')]
	#[Nether\Console\Meta\Info('Find users that fit specified criteria.')]
	#[Nether\Console\Meta\Value('--Alias', 'Find user with specified Alias.')]
	#[Nether\Console\Meta\Value('--Email', 'Find user with specified Email.')]
	#[Nether\Console\Meta\Value('--Search', 'Find users that match the specified query.')]
	#[Nether\Console\Meta\Toggle('--SearchAlias', 'Include the Alias as part of the Search query.')]
	#[Nether\Console\Meta\Toggle('--SearchEmail', 'Include the Email as part of the Search query.')]
	public function
	HandleUserFind():
	int {

		$Users = NULL;
		$User = NULL;
		$UKey = NULL;
		$Format = $this->GetOption('Format') ?: 'json';
		$Full = $this->GetOption('Full') ?: FALSE;

		////////

		$Users = Nether\User\Entity::Find([
			'Alias'       => ($this->GetOption('Alias') ?: NULL),
			'Email'       => ($this->GetOption('Email') ?: NULL),

			'Search'      => ($this->GetOption('Search') ?: NULL),
			'SearchAlias' => (bool)$this->GetOption('SearchAlias'),
			'SearchEmail' => (bool)$this->GetOption('SearchEmail'),

			'Page'        => ($this->GetOption('Page') ?: 1),
			'Limit'       => ($this->GetOption('Limit') ?: 0)
		]);

		////////

		if($Format === 'json') {
			echo '[', PHP_EOL;
			foreach($Users as $UKey => $User) {
				echo chr(9);

				if(!$Full)
				echo json_encode([ 'ID'=> $User->ID, 'Alias'=> $User->Alias, 'Email'=> $User->Email ]);
				else
				echo json_encode($User);

				if(!$Users->IsLastKey($UKey))
				echo ',';

				echo PHP_EOL;
			}
			echo ']', PHP_EOL;
		}

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	protected function
	GetUser(mixed $Input):
	?Nether\User\Entity {

		$User = NULL;

		////////

		if(is_numeric($Input))
		$User = Nether\User\Entity::GetByID((int)$Input);

		elseif(str_contains($Input, '@'))
		$User = Nether\User\Entity::GetByEmail($Input);

		else
		$User = Nether\User\Entity::GetByAlias($Input);

		////////

		return $User;
	}

}

exit((new App)->Run());


