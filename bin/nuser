<?php

(function() {
	require(sprintf('%s/autoload.php', dirname(__DIR__, 3)));
	return;
})();

use Nether\User\EntityAccessType;

class App
extends Nether\Console\Client {

	protected function
	OnReady():
	void {

		// get atlantis to load the database config if it is around.

		if(class_exists('\\Nether\\Atlantis\\Engine')) {
			$App = new Nether\Atlantis\Engine(getcwd());
		}

		return;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Nether\Console\Meta\Command('get')]
	#[Nether\Console\Meta\Info('View information about the user.')]
	#[Nether\Console\Meta\Arg('id/alias', 'Username / User Alias')]
	#[Nether\Console\Meta\Error(1, 'user not found')]
	public function
	HandleUserGet():
	int {

		$Lookup = $this->GetInput(1);
		$Format = $this->GetOption('Format') ?: 'json';
		$Full = $this->GetOption('Full') ?: FALSE;
		$User = Nether\User\Entity::GetBy($Lookup);

		if(!$User)
		$this->Quit(1);

		if($Format === 'json') {
			if(!$Full)
			echo json_encode([ 'ID'=> $User->ID, 'Alias'=> $User->Alias, 'Email'=> $User->Email ]);
			else
			echo json_encode($User);

			echo PHP_EOL;
		}

		return 0;
	}

	#[Nether\Console\Meta\Command('insert')]
	#[Nether\Console\Meta\Info('Create a new user. Alias and Email are required.')]
	#[Nether\Console\Meta\Arg('alias', 'Username / User Alias')]
	#[Nether\Console\Meta\Arg('email', 'Email address.')]
	#[Nether\Console\Meta\Error(1, 'Alias and Email must be specified.')]
	#[Nether\Console\Meta\Error(2, 'Failed to insert new user.')]
	public function
	HandleUserInsert():
	int {

		$Format = $this->GetOption('Format') ?: 'json';
		$Full = $this->GetOption('Full') ?: FALSE;

		////////

		$Alias = $this->GetInput(1);
		$Email = $this->GetInput(2);

		if(!$Alias || !$Email)
		$this->Quit(1);

		////////

		$User = Nether\User\Entity::Insert([
			'Alias' => $Alias,
			'Email' => $Email
		]);

		if(!$User)
		$this->Quit(2);

		////////

		if($Format === 'json') {
			if(!$Full)
			static::PrintLn(json_encode([ 'ID'=> $User->ID, 'Alias'=> $User->Alias, 'Email'=> $User->Email ]));
			else
			static::PrintLn(json_encode($User));
		}

		return 0;
	}

	#[Nether\Console\Meta\Command('update')]
	#[Nether\Console\Meta\Info('Update information for a user.')]
	#[Nether\Console\Meta\Arg('id/alias', 'Username / User Alias')]
	#[Nether\Console\Meta\Value('--DbField', 'A Database Field. All uppercase NULL will convert to literal DB NULL.')]
	#[Nether\Console\Meta\Error(1, 'user not found')]
	public function
	HandleUserUpdate():
	int {

		$Table = Nether\User\Entity::GetTableInfo();
		$Lookup = $this->GetInput(1);
		$User = Nether\User\Entity::GetBy($Lookup);
		$Dataset = [];
		$Key = NULL;

		if(!$User)
		$this->Quit(1);

		////////

		foreach(array_keys($Table->Fields) as $Key)
		if($this->HasOption($Key)) {
			$Val = $this->GetOption($Key);

			$Dataset[$Key] = match($Val) {
				'NULL'  => NULL,
				default => $Val
			};
		}

		////////

		$User->Update($Dataset);

		Nether\Console\Util::ObjectDump($User);

		return 0;
	}

	#[Nether\Console\Meta\Command('drop')]
	#[Nether\Console\Meta\Info('View information about the user.')]
	#[Nether\Console\Meta\Arg('id/alias/email', 'User ID, Alias, or Email')]
	#[Nether\Console\Meta\Error(1, 'user not found')]
	public function
	HandleUserDrop():
	int {

		$Lookup = $this->GetInput(1);
		$User = Nether\User\Entity::GetBy($Lookup);

		if(!$User)
		$this->Quit(1);

		$this->PrintLn("deleted: {$User->ID} {$User->Alias} {$User->Email}");
		$User->Drop();

		return 0;
	}

	#[Nether\Console\Meta\Command('find')]
	#[Nether\Console\Meta\Info('Find users that fit specified criteria.')]
	#[Nether\Console\Meta\Value('--Alias', 'Find user with specified Alias.')]
	#[Nether\Console\Meta\Value('--Email', 'Find user with specified Email.')]
	#[Nether\Console\Meta\Value('--Search', 'Find users that match the specified query.')]
	#[Nether\Console\Meta\Toggle('--SearchAlias', 'Include the Alias as part of the Search query.')]
	#[Nether\Console\Meta\Toggle('--SearchEmail', 'Include the Email as part of the Search query.')]
	#[Nether\Console\Meta\Error(1, 'user not found')]
	public function
	HandleUserFind():
	int {

		$Users = NULL;
		$User = NULL;
		$UKey = NULL;
		$Format = $this->GetOption('Format') ?: 'json';
		$Full = $this->GetOption('Full') ?: FALSE;

		////////

		$Users = Nether\User\Entity::Find([
			'Alias'       => ($this->GetOption('Alias') ?: NULL),
			'Email'       => ($this->GetOption('Email') ?: NULL),

			'Search'      => ($this->GetOption('Search') ?: NULL),
			'SearchAlias' => (bool)$this->GetOption('SearchAlias'),
			'SearchEmail' => (bool)$this->GetOption('SearchEmail'),

			'Page'        => ($this->GetOption('Page') ?: 1),
			'Limit'       => ($this->GetOption('Limit') ?: 0),
			'Sort'        => ($this->GetOption('Sort') ?: NULL)
		]);

		////////

		if($Format === 'json') {
			echo '[', PHP_EOL;
			foreach($Users as $UKey => $User) {
				echo chr(9);

				if(!$Full)
				echo json_encode([ 'ID'=> $User->ID, 'Alias'=> $User->Alias, 'Email'=> $User->Email ]);
				else
				echo json_encode($User);

				if(!$Users->IsLastKey($UKey))
				echo ',';

				echo PHP_EOL;
			}
			echo ']', PHP_EOL;
		}

		return 0;
	}

	#[Nether\Console\Meta\Command('shiftsand')]
	#[Nether\Console\Meta\Arg('id/alias/email', 'User ID, Alias, or Email')]
	#[Nether\Console\Meta\Info('Generate a new PSand for specified user. This will invalidate all sessions and keys.')]
	#[Nether\Console\Meta\Error(1, 'user not found')]
	public function
	HandleUserSand():
	int {

		$Lookup = $this->GetInput(1);
		$User = Nether\User\Entity::GetBy($Lookup);

		if(!$User)
		$this->Quit(1);

		$User->UpdateSandShift();
		static::PrintLn("User({$User->ID}, {$User->Alias}) sands have been shifted");

		return 0;
	}

	#[Nether\Console\Meta\Command('pw')]
	#[Nether\Console\Meta\Info('Change the password for a user.')]
	#[Nether\Console\Meta\Arg('id/alias/email', 'User ID, Alias, or Email')]
	#[Nether\Console\Meta\Toggle('--disable', 'Disable password login for specified user.')]
	#[Nether\Console\Meta\Error(1, 'user not found')]
	#[Nether\Console\Meta\Error(2, 'passwords did not match')]
	public function
	HandleUserPassword():
	int {

		$Lookup = $this->GetInput(1);
		$Disable = $this->GetOption('Disable');
		$User = Nether\User\Entity::GetBy($Lookup);

		////////

		if(!$User)
		$this->Quit(1);

		////////

		if($Disable) {
			static::PrintLn("User({$User->ID}, {$User->Alias}) password disabled");
			$User->DisablePassword();

			return 0;
		}

		////////

		$PW1 = $this->Prompt('Enter New Password', '?>');
		$PW2 = $this->Prompt('Confirm Password', '&>');

		if($PW1 !== $PW2)
		$this->Quit(2);

		$User->UpdatePassword($PW1);

		static::PrintLn("User({$User->ID}, {$User->Alias}) password updated");

		return 0;
	}

	#[Nether\Console\Meta\Command('seen')]
	#[Nether\Console\Meta\Info('Display user last seen status.')]
	#[Nether\Console\Meta\Arg('id/alias/email', 'User ID, Alias, or Email')]
	#[Nether\Console\Meta\Toggle('--now', 'Set last seen to now.')]
	#[Nether\Console\Meta\Value('--set', 'Unix Timestamp to set to.')]
	#[Nether\Console\Meta\Value('--when', 'String that can be digested by strtotime to set to.')]
	#[Nether\Console\Meta\Error(1, 'user not found')]
	public function
	HandleUserSeen():
	int {

		$Lookup = $this->GetInput(1);
		$User = Nether\User\Entity::GetBy($Lookup);
		$TimeToSet = NULL;

		////////

		if($this->HasOption('Now'))
		$TimeToSet = strtotime('now');

		elseif($this->HasOption('Set'))
		$TimeToSet = (int)$this->GetOption('Set');

		elseif($this->HasOption('When'))
		$TimeToSet = strtotime($this->GetOption('When'));

		////////

		if(!$User)
		$this->Quit(1);

		if($TimeToSet !== NULL)
		$User->UpdateTimeSeen($TimeToSet);

		////////

		$Timeframe = (
			(new Nether\Common\Units\Timeframe($User->TimeSeen))
			->SetLabelCase(-1)
			->SetLabelSep(NULL)
			->SetLabelSet(1)
		);

		$this->FormatLn(
			'%s last seen: %s',
			$User, $Timeframe->GetSuffixedString(Ago: 'ago')
		);

		return 0;
	}

	#[Nether\Console\Meta\Command('ban')]
	#[Nether\Console\Meta\Info('Manage user ban status.')]
	#[Nether\Console\Meta\Arg('id/alias/email', 'User ID, Alias, or Email')]
	#[Nether\Console\Meta\Toggle('--ban', 'Ban the user now.')]
	#[Nether\Console\Meta\Toggle('--unban', 'Unban the user.')]
	#[Nether\Console\Meta\Value('--set', 'Unix Timestamp to set to.')]
	#[Nether\Console\Meta\Value('--when', 'String that can be digested by strtotime to set to.')]
	#[Nether\Console\Meta\Error(1, 'user not found')]
	public function
	HandleUserBan():
	int {

		$Lookup = $this->GetInput(1);
		$User = Nether\User\Entity::GetBy($Lookup);
		$TimeToSet = NULL;

		////////

		if($this->HasOption('Ban'))
		$TimeToSet = strtotime('now');

		elseif($this->HasOption('Unban'))
		$TimeToSet = 0;

		elseif($this->HasOption('Set'))
		$TimeToSet = (int)$this->GetOption('Set');

		elseif($this->HasOption('When'))
		$TimeToSet = strtotime($this->GetOption('When'));

		////////

		if(!$User)
		$this->Quit(1);

		if($TimeToSet !== NULL)
		$User->UpdateTimeBanned($TimeToSet);

		////////

		if(!$User->TimeBanned) {
			$this->FormatLn('%s is not banned', $User);
			return 0;
		}

		$Timeframe = (
			(new Nether\Common\Units\Timeframe($User->TimeBanned))
			->SetLabelCase(-1)
			->SetLabelSep(NULL)
			->SetLabelSet(1)
		);

		$this->FormatLn(
			'%s banned on %s (%s)',
			$User,
			date('Y-m-d', $User->TimeBanned),
			$Timeframe->GetSuffixedString(Ago: 'ago')
		);

		return 0;
	}

	#[Nether\Console\Meta\Command('access')]
	#[Nether\Console\Meta\Info('Manage user access types.')]
	#[Nether\Console\Meta\Arg('id/alias/email', 'User ID, Alias, or Email')]
	#[Nether\Console\Meta\Value('--set', 'Access Type Key to set. Requires --type and --value to also be set.')]
	#[Nether\Console\Meta\Value('--drop', 'Access Type Key to drop.')]
	#[Nether\Console\Meta\Error(1, 'user not found')]
	public function
	HandleUserAccess():
	int {

		$Lookup = $this->GetInput(1);
		$User = Nether\User\Entity::GetBy($Lookup);
		$F = $this->Formatter;

		if(!$User)
		$this->Quit(1);

		////////

		if($this->HasOption('Set')) {
			$AKey = $this->GetOption('Set');
			$AValue = $this->GetOption('Value') ?: 1;

			if($AKey && $AValue)
			EntityAccessType::Insert([
				'EntityID' => $User->ID,
				'Key'      => $AKey,
				'Value'    => $AValue
			]);
		}

		if($this->HasOption('Drop')) {
			$AKey = $this->GetOption('drop');

			if($AKey)
			EntityAccessType::DropByEntityKey($User->ID, $AKey);
		}

		////////

		static::PrintLn(sprintf(
			'%s %s',
			$F->YellowBold('User:'),
			$F->Yellow((string)$User)
		));

		$List = $User->GetAccessTypes();
		foreach($List as $Key => $Type) {
			static::PrintLn(sprintf(
				'Key: %s, Value: %d',
				$Key,
				$Type->Value
			));
		}

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	protected function
	LookupUserBy(mixed $Input):
	?Nether\User\Entity {

		$User = NULL;

		////////

		if(is_numeric($Input))
		$User = Nether\User\Entity::GetByID((int)$Input);

		elseif(str_contains($Input, '@'))
		$User = Nether\User\Entity::GetByEmail($Input);

		else
		$User = Nether\User\Entity::GetByAlias($Input);

		////////

		return $User;
	}

}

exit((new App)->Run());


